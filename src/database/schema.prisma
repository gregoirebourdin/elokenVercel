datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  title         String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?    @default("https://mhnlmjovpvyolhbtpdck.supabase.co/storage/v1/object/public/images/static/user.png")
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  activities    Activity[]
  projects  Project[]
  createdAt DateTime  @default(now())
  roles     Role[]
}

model Project {
  id               String      @id @default(cuid())
  title            String
  description      String @default("Votre description")
  analytics        String?
  notion         String?     @default("https://images.unsplash.com/photo-1557682250-33bd709cbe85?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2029&q=80")
  image            String?     @default("https://images.unsplash.com/photo-1557682250-33bd709cbe85?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2029&q=80")
  ownerName         String?    @default("John Doe")
  website          String?
  instagramContact String?
  emailContact     String?
  telephoneContact String?
  linkedinContact  String?
  twitterContact   String?
  offline          Boolean     @default(false)
  articles         Article[]
  categories       Category[]
  banners          Banner[]
  faqs             Faq[]
  portfolios       Portfolio[]
  ratings          Rating[]
  legals           Legal[]
  links            Link[]
  users            User[]
  jobs             Job[]
  teams            Team[]
  events           Event[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  roles            Role[]
}

model Email {
  id        String   @id @default(cuid())
  title     String
  html      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Team {
  id          String  @id @default(cuid())
  title       String  @unique
  description String  @default("Votre description")
  job         String
  image       String? @default("https://images.unsplash.com/photo-1557682250-33bd709cbe85?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2029&q=80")
  project     Project @relation(fields: [projectId], references: [id],  onDelete: Cascade)
  projectId   String
}

model Category {
  id        String    @id @default(cuid())
  title     String    @unique
  createdAt DateTime  @default(now())
  articles  Article[]
  project   Project   @relation(fields: [projectId], references: [id],  onDelete: Cascade)
  projectId String
}

model Activity {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String // relation scalar field  (used in the `@relation` attribute above)
}

model Rating {
  id        String   @id @default(cuid())
  name      String
  image     String
  job       String
  comment   String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Legal {
  id        String   @id @default(cuid())
  slug      String?  @unique
  title     String
  content   String
  published Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Portfolio {
  id          String   @id @default(cuid())
  slug        String?
  title       String
  image       String
  tag         String
  description String
    published   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
}

model Link {
  id             Int     @id @default(autoincrement())
  sort           Int     @default(autoincrement())
  title          String
  description    String
  buttonText     String
  destinationUrl String
  image          String
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
}

model Banner {
  id         Int     @id @default(autoincrement())
  sort       Int     @default(autoincrement())
  title      String
  buttonText String
  buttonUrl  String
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
}

model Faq {
  id        String  @id @default(cuid())
  question  String
  answer    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Article {
  id          String     @id @default(cuid())
  slug        String?    @unique
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String // relation scalar field  (used in the `@relation` attribute above)
  createdAt   DateTime   @default(now())
  title       String
  content     String
  image       String
  description String
  published   Boolean    @default(false)
  categories  Category[]
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
}

model Job {
  id        String  @id @default(cuid())
  slug      String?
  title     String
  content   String
  jobType   JobType @default(CDI)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Event {
  id               String  @id @default(cuid())
  title            String  @default("Votre titre")
  content          String  @default("Votre contenu")
  tag              String  @default("Votre tag")
  date             String  @default("Votre date")
  hour             String  @default("Votre heure")
  place            String  @default("Votre lieu")
  reservationPlace String  @default("Votre lieu de r√©servation")
  price            String  @default("Votre prix")
  project          Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
}

model Role {
  id        String  @id @default(cuid())
  name      String  @default("USER")
  banned    Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}


enum JobType {
  CDD
  CDI
  STAGE
  ALTERNANCE
  FREELANCE
  PARTNER
}
